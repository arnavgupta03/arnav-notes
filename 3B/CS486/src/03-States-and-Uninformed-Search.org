#+title: States And Uninformed Search
#+author: Arnav Gupta
#+LATEX_HEADER: \usepackage{parskip,darkmode}
#+LATEX_HEADER: \enabledarkmode
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{positioning, calc}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="src/latex.css" />

* Introduction to Search
Solving some problems requires searching for a solution by searching a directed graph that is
the *state space* of the problem.
A graph consists of a set of nodes and a set of arcs/edges.
Nodes represent *states* and edges represent legal *state transitions*.

A *search problem* is defined by:
- a set of states
- an initial state
- goal states or a goal test (function that tells whether a given state is a goal state)
- a successor (neighbour) function (action from one state to other states)
- optionally, a cost associated with each action

A solution to the search problem is a path from the start state to a goal state, possibly
optimizing for cost.

Graph searching involves maintaining a *frontier* of paths from the start node that have been explored
and expanding this into unexplored nodes until the goal node is encountered.

*Search strategy*: the way the frontier is expanded

Search algorithms can return multiple answers as well.

Types of search:
- uninformed (blind)
- heuristic
- sophisticated hacks

Properties of search algorithms:
- /space complexity/: size of frontier in worst case
- /time complexity/: number of nodes visited in worst case
- /completeness/: if a solution exists, is it found?
- /optimality/: if a solution is found, is it the least cost solution?

Useful quantities:
- $b$: branching factor (max number of children of any node)
- $m$: maximum depth of the search tree
- $d$: depth of the shallowest goal node

* Depth-First Search
Treat the frontier as a stack, select the last element added to the frontier to be expanded.

#+BEGIN_SRC latex
\begin{center}
        \begin{tikzpicture}[node distance=1.5cm, every node/.style={circle, draw, fill=blue!40}]
                \node (A) {A};
                \node (B) [right=of A] {B};
                \node (C) [right=of B] {C};
                \node (D) [below=of B] {D};
                \node (E) [below=of C] {E};
                \node (F) [below=of D] {F};
                \node (G) [below=of E] {G};

                \draw (A) -- (B);
                \draw (A) -- (D);
                \draw (B) -- (C);
                \draw (B) -- (D);
                \draw (C) -- (E);
                \draw (D) -- (F);
                \draw (E) -- (G);

                \foreach \i/\j in {A/B, B/C, C/E, E/G, B/D, D/F} {
                        \draw[thick, red] (\i) -- (\j);
                }

                % Add traversal order labels in white with dark gray circles
                \node[draw, circle, fill=black!70, inner sep=1pt] at (A) [above right=0.2cm and 0.2cm of A] {\textcolor{white}{1}};
                \node[draw, circle, fill=black!70, inner sep=1pt] at (B) [above right=0.2cm and 0.2cm of B] {\textcolor{white}{2}};
                \node[draw, circle, fill=black!70, inner sep=1pt] at (C) [above right=0.2cm and 0.2cm of C] {\textcolor{white}{3}};
                \node[draw, circle, fill=black!70, inner sep=1pt] at (D) [below left=0.2cm and 0.2cm of D] {\textcolor{white}{6}};
                \node[draw, circle, fill=black!70, inner sep=1pt] at (E) [below right=0.2cm and 0.2cm of E] {\textcolor{white}{4}};
                \node[draw, circle, fill=black!70, inner sep=1pt] at (F) [below left=0.2cm and 0.2cm of F] {\textcolor{white}{7}};
                \node[draw, circle, fill=black!70, inner sep=1pt] at (G) [below right=0.2cm and 0.2cm of G] {\textcolor{white}{5}};
        \end{tikzpicture}
\end{center}
#+END_SRC

*Cycle checking*: prune a path that ends in a node already on the path

DFS can be implemented recursively, with cycle checking.
With this implementation, the frontier is implicitly stored in the call stack.

** Properties of DFS
Properties:
- /space complexity/: $O(bm)$
- /time complexity/: $O(b^{m})$
- /completeness/: no, will get stuck in infinite path (may or may not be cycle)
- /optimality/: no, pays no attention to cost

DFS is useful when:
- space is restricted
- many solutions exist, possibly with long paths

DFS is poor when:
- infinite paths exist
- optimal solutions are shallow
- multiple paths to a node

* Breadth-First Search
Treats the frontier as a queue, select the earliest element added to the frontier to be expanded.

#+BEGIN_SRC latex
\begin{center}
        \begin{tikzpicture}[node distance=1.5cm, every node/.style={circle, draw, fill=blue!40}]
        \node (A) {A};
        \node (B) [right=of A] {B};
        \node (C) [right=of B] {C};
        \node (D) [below=of B] {D};
        \node (E) [below=of C] {E};
        \node (F) [below=of D] {F};
        \node (G) [below=of E] {G};

        \draw (A) -- (B);
        \draw (A) -- (D);
        \draw (B) -- (C);
        \draw (B) -- (D);
        \draw (C) -- (E);
        \draw (D) -- (F);
        \draw (E) -- (G);

        \foreach \i/\j in {A/B, A/D, B/C, B/D, C/E, D/F, E/G} {
                \draw[thick, red] (\i) -- (\j);
        }

        \node[draw, circle, fill=black!70, inner sep=1pt] at (A) [above right=0.2cm and 0.2cm of A] {\textcolor{white}{1}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (B) [above right=0.2cm and 0.2cm of B] {\textcolor{white}{2}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (D) [below left=0.2cm and 0.2cm of D] {\textcolor{white}{3}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (C) [above right=0.2cm and 0.2cm of C] {\textcolor{white}{4}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (F) [below left=0.2cm and 0.2cm of F] {\textcolor{white}{5}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (E) [below right=0.2cm and 0.2cm of E] {\textcolor{white}{6}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (G) [below right=0.2cm and 0.2cm of G] {\textcolor{white}{7}};
        \end{tikzpicture}
\end{center}
#+END_SRC

** Multi-Path Pruning
Prune a path to a given node than any path has been found to, since a path has already been found to it.

Pruning subsumes a cycle check, since the current path is a path to the node.

Requires storing all nodes paths have been found to, and must guarantee that this allows optimality.

** Properties of BFS
Properties:
- /space complexity/: $O(b^{d})$
- /time complexity/: $O(b^{d})$
- /completeness/: yes, since it explores the tree level by level until it finds a goal
- /optimality/: no, it is guaranteed to find the shallowest goal node

BFS is useful when:
- space is no concern
- a solution with the fewest arcs is desirable

BFS is a poor method when:
- all solutions are deep in the tree
- problem is large and graph is dynamically generated

* Iterative Deepening Search
For every depth limit, perform DFS until the depth limit is reached.

#+BEGIN_SRC latex
\begin{center}
    \begin{tikzpicture}[node distance=1.5cm, every node/.style={circle, draw, fill=blue!40}]
        % Nodes
        \node (A) {A};
        \node (B) [right=of A] {B};
        \node (C) [right=of B] {C};
        \node (D) [below=of B] {D};
        \node (E) [below=of C] {E};
        \node (F) [below=of D] {F};
        \node (G) [below=of E] {G};

        % Edges
        \draw (A) -- (B);
        \draw (A) -- (D);
        \draw (B) -- (C);
        \draw (B) -- (D);
        \draw (C) -- (E);
        \draw (D) -- (F);
        \draw (E) -- (G);

        % Highlighting the traversal order for depth 2
        \foreach \i/\j in {A/B, A/D, B/C, D/F} {
                \draw[thick, red] (\i) -- (\j);
        }

        % Traversal order numbers for depth 2
        \node[draw, circle, fill=black!70, inner sep=1pt] at (A) [above right=0.2cm and 0.2cm of A] {\textcolor{white}{1}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (B) [above right=0.2cm and 0.2cm of B] {\textcolor{white}{2}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (C) [above right=0.2cm and 0.2cm of C] {\textcolor{white}{3}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (D) [below left=0.2cm and 0.2cm of D] {\textcolor{white}{4}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (F) [below left=0.2cm and 0.2cm of F] {\textcolor{white}{5}};
        \end{tikzpicture}

    \vspace{1cm} % Space between the two graphs
        \begin{tikzpicture}[node distance=1.5cm, every node/.style={circle, draw, fill=blue!40}]
        % Nodes
        \node (A) {A};
        \node (B) [right=of A] {B};
        \node (C) [right=of B] {C};
        \node (D) [below=of B] {D};
        \node (E) [below=of C] {E};
        \node (F) [below=of D] {F};
        \node (G) [below=of E] {G};

        % Edges
        \draw (A) -- (B);
        \draw (A) -- (D);
        \draw (B) -- (C);
        \draw (B) -- (D);
        \draw (C) -- (E);
        \draw (D) -- (F);
        \draw (E) -- (G);

        % Highlighting the traversal order for depth 3
        \foreach \i/\j in {A/B, A/D, B/C, C/E, D/F} {
                \draw[thick, red] (\i) -- (\j);
        }

        % Traversal order numbers for depth 3
        \node[draw, circle, fill=black!70, inner sep=1pt] at (A) [above right=0.2cm and 0.2cm of A] {\textcolor{white}{1}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (B) [above right=0.2cm and 0.2cm of B] {\textcolor{white}{2}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (C) [above right=0.2cm and 0.2cm of C] {\textcolor{white}{3}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (E) [above right=0.2cm and 0.2cm of E] {\textcolor{white}{4}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (D) [below left=0.2cm and 0.2cm of D] {\textcolor{white}{5}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (F) [below left=0.2cm and 0.2cm of F] {\textcolor{white}{6}};
        \end{tikzpicture}
\end{center}
#+END_SRC

** Properties of IDS
Properties:
- /space complexity/: $O(bd)$
- /time complexity/: $O(b^{d})$
- /completeness/: yes, since it explores the tree level by level until it finds a goal
- /optimality/: no, it is guaranteed to find the shallowest goal node

* Lowest-Cost-First Search
Selects a path on the frontier with lowest cost, where the frontier is a priority queue ordered
by path cost.

It is an uninformed/blind search (does not take the goal into account).

#+BEGIN_SRC latex
\begin{center}
    \begin{tikzpicture}[node distance=1.5cm, every node/.style={circle, draw, fill=blue!40}]
        \node (A) {A};
        \node (B) [right=of A] {B};
        \node (C) [right=of B] {C};
        \node (D) [below=of B] {D};
        \node (E) [below=of C] {E};
        \node (F) [below=of D, fill=black!80] {F}; % Goal node F highlighted
        \node (G) [below=of E] {G};

        \draw (A) -- (B);
        \draw (A) -- (D);
        \draw (B) -- (C);
        \draw (B) -- (D);
        \draw (C) -- (E);
        \draw (D) -- (F);
        \draw (E) -- (G);

        % Cost labels with better visibility
        \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(A)!0.5!(B)$) [above] {1};
        \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(A)!0.5!(D)$) [left] {4};
        \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(B)!0.5!(C)$) [above] {2};
        \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(B)!0.5!(D)$) [right] {3};
        \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(C)!0.5!(E)$) [right] {1};
        \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(D)!0.5!(F)$) [left] {2};
        \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(E)!0.5!(G)$) [right] {1};

        \foreach \i/\j in {A/B, B/C, B/D, C/E, D/F, E/G} {
            \draw[thick, red] (\i) -- (\j);
        }

        \node[draw, circle, fill=black!70, inner sep=1pt] at (A) [above right=0.2cm and 0.2cm of A] {\textcolor{white}{1}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (B) [above right=0.2cm and 0.2cm of B] {\textcolor{white}{2}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (D) [below left=0.2cm and 0.2cm of D] {\textcolor{white}{4}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (C) [above right=0.2cm and 0.2cm of C] {\textcolor{white}{3}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (F) [below left=0.2cm and 0.2cm of F] {\textcolor{white}{7}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (E) [below right=0.2cm and 0.2cm of E] {\textcolor{white}{5}};
        \node[draw, circle, fill=black!70, inner sep=1pt] at (G) [below right=0.2cm and 0.2cm of G] {\textcolor{white}{6}};
    \end{tikzpicture}
\end{center}
#+END_SRC

** Properties of LCFS
Properties:
- /space complexity/: exponential
- /time complexity/: exponential
- /completeness/: yes
- /optimality/: yes

Completeness and optimality require that:
1. the branching factor is finite
2. the cost of every edge is strictly positive

** Dijkstra's Algorithm
Variant of LCFS with multi-path pruning.

Frontier is a PQ sorted by cost, with each node keeping track

#+BEGIN_SRC latex
\begin{center}
  \begin{tikzpicture}[node distance=1.5cm, every node/.style={circle, draw, fill=blue!40}]
    \node (A) {A;0};
    \node (B) [right=of A] {B;1};
    \node (C) [right=of B] {C;3};
    \node (D) [below=of B] {D;4};
    \node (E) [below=of C] {E;4};
    \node (F) [below=of D, fill=black!80] {F;6}; % Goal node F highlighted
    \node (G) [below=of E] {G;5};

    \draw (A) -- (B);
    \draw (A) -- (D);
    \draw (B) -- (C);
    \draw (B) -- (D);
    \draw (C) -- (E);
    \draw (D) -- (F);
    \draw (E) -- (G);

    % Cost labels with better visibility
    \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(A)!0.5!(B)$) [above] {1};
    \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(A)!0.5!(D)$) [left] {4};
    \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(B)!0.5!(C)$) [above] {2};
    \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(B)!0.5!(D)$) [right] {3};
    \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(C)!0.5!(E)$) [right] {1};
    \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(D)!0.5!(F)$) [left] {2};
    \node[draw, rectangle, fill=yellow!80, text=black, inner sep=1pt] at ($(E)!0.5!(G)$) [right] {1};

    % Highlight the explored edges
    \foreach \i/\j in {A/B, A/D, B/C, B/D, C/E, D/F, E/G} {
        \draw[thick, red] (\i) -- (\j);
    }

    % Indicate traversal order with black circles
    \node[draw, circle, fill=black!70, inner sep=1pt] at (A) [above right=0.2cm and 0.2cm of A] {\textcolor{white}{1}};
    \node[draw, circle, fill=black!70, inner sep=1pt] at (B) [above right=0.2cm and 0.2cm of B] {\textcolor{white}{2}};
    \node[draw, circle, fill=black!70, inner sep=1pt] at (D) [below left=0.2cm and 0.2cm of D] {\textcolor{white}{4}};
    \node[draw, circle, fill=black!70, inner sep=1pt] at (C) [above right=0.2cm and 0.2cm of C] {\textcolor{white}{3}};
    \node[draw, circle, fill=black!70, inner sep=1pt] at (F) [below left=0.2cm and 0.2cm of F] {\textcolor{white}{7}};
    \node[draw, circle, fill=black!70, inner sep=1pt] at (E) [below right=0.2cm and 0.2cm of E] {\textcolor{white}{5}};
    \node[draw, circle, fill=black!70, inner sep=1pt] at (G) [below right=0.2cm and 0.2cm of G] {\textcolor{white}{6}};
\end{tikzpicture}
\end{center}
#+END_SRC
